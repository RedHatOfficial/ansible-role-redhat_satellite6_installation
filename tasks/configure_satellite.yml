---
#Create Hammer directory on /root
- name: "Configure | create .hammer directory on user"
  file:
    path: "~/.hammer"
    state: "directory"
    mode: "0755"

#Copy the hammer configuration from template to the .hammer directory
- name: "Configure | set configuration for hammer from template"
  template:
    src: "hammer_config.yml.j2"
    dest: "~/.hammer/cli_config.yml"

#Copy the manifest
- name: "Configure | copy manifest"
  become: "yes"
  copy:
    src: "{{ satellite_deployment_manifest_path }}"
    dest: "{{ satellite_deployment_manifest_dest_path }}"
  when: satellite_deployment_remote_manifest is undefined
  #when: not satellite_deployment_remote_manifest

- name: "Configure | copy manifest from remote"
  become: "yes"
  get_url:
    url: "{{ satellite_deployment_manifest_path }}"
    dest: "{{ satellite_deployment_manifest_dest_path }}"
  when: satellite_deployment_remote_manifest is not undefined

#Fetch organization ID
- name: "Check | fetch organization ID"
  become: "yes"
  shell: "hammer organization list | grep {{ satellite_deployment_organization }} | cut -d '|' -f 1"
  register: id
  ignore_errors: True

#If fetching organization ID failed display the message
- name: "Check | fetching of organization ID if failed"
  command: /bin/echo "Unable to fetch Organization list."
  when: id is failed

#Type casting id to number
- name: "Set fact for organization ID"
  set_fact:
    organization_id: "{{ id.stdout | int }}"
  when: id is succeeded
- name: "Check succeeded"
  shell: "hammer subscription manifest-history --organization-id {{ organization_id }} | grep -i SUCCESS"
  register: manifest_status
  when: id is succeeded

#Upload the manifest to the satellite
- name: "Configure | upload the manifest"
  become: "yes"
  shell: "hammer subscription upload --file
    {{ satellite_deployment_manifest_dest_path }} --organization
    {{ satellite_deployment_organization }}"
  when: manifest_status is not succeeded

#Enabling repos on satellite
- name: "Configure | enable repos"
  become: "yes"
  shell: "hammer repository-set '{{ item.state }}' --organization
    '{{ satellite_deployment_organization }}'
    --product '{{ item.product_name }}' --name '{{ item.name_repo }}'
    {% if item.rel is defined %} --releasever '{{ item.rel }}' {% endif %}
    --basearch '{{ item.architecture }}'"
  with_items: "{{ satellite_deployment_repositories }}"
  ignore_errors: "yes"
  tags:
    - "satellite_deployment_repositories"

#Get the repos ids and sync the repos
- name: "Configure | grab repositories uuid"
  shell: "hammer repository list --organization
    {{ satellite_deployment_organization }} | grep yum | awk '{print $1}'"
  register: "repos"

- name: "Configure | sync repos on satellite"
  shell: "hammer repository synchronize --id '{{ item }}' --organization
    {{ satellite_deployment_organization }}"
  with_items: "{{ repos.stdout_lines }}"
  register: "sync_repos_result"
  retries: 3
  until: sync_repos_result is success
